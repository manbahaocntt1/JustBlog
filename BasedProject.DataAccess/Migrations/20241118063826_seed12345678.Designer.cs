// <auto-generated />
using System;
using BasedProject.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BasedProject.DataAccess.Migrations
{
    [DbContext(typeof(BasedProjectDbContext))]
    [Migration("20241118063826_seed12345678")]
    partial class seed12345678
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CategoryUrlSlug")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffd6c4b1-c9b6-4453-8eb4-9ee6871f87c0"),
                            CategoryName = "Technology",
                            CategoryUrlSlug = "technology",
                            Description = "All about tech"
                        },
                        new
                        {
                            Id = new Guid("cd2b0e22-39e7-4665-9104-f8df96e96287"),
                            CategoryName = "Lifestyle",
                            CategoryUrlSlug = "lifestyle",
                            Description = "Tips for better living"
                        },
                        new
                        {
                            Id = new Guid("5769e55d-129f-4903-be45-5cf3e57d5a0f"),
                            CategoryName = "Travel",
                            CategoryUrlSlug = "travel",
                            Description = "Explore the world"
                        });
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(102400)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostUrlSlug")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfd5319e-1af5-4da4-83ca-cd6ff65a4575"),
                            CategoryId = new Guid("ffd6c4b1-c9b6-4453-8eb4-9ee6871f87c0"),
                            PostContent = "ASP.NET is a powerful framework...",
                            PostUrlSlug = "getting-started-aspnet",
                            PostedOn = new DateTime(2024, 11, 18, 13, 38, 26, 301, DateTimeKind.Local).AddTicks(147),
                            Published = true,
                            ShortDescription = "A guide to ASP.NET for beginners",
                            Title = "Getting Started with ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("c2e3392e-3c79-44d5-9c77-d885c794d753"),
                            CategoryId = new Guid("cd2b0e22-39e7-4665-9104-f8df96e96287"),
                            PostContent = "Living a healthy life involves...",
                            PostUrlSlug = "healthy-living-tips",
                            PostedOn = new DateTime(2024, 11, 18, 13, 38, 26, 301, DateTimeKind.Local).AddTicks(156),
                            Published = true,
                            ShortDescription = "Tips for a healthy lifestyle",
                            Title = "Healthy Living Tips"
                        },
                        new
                        {
                            Id = new Guid("8cea09ae-fb8b-4954-8698-50e48582097b"),
                            CategoryId = new Guid("5769e55d-129f-4903-be45-5cf3e57d5a0f"),
                            PostContent = "From beaches to mountains, explore...",
                            PostUrlSlug = "top-travel-destinations",
                            PostedOn = new DateTime(2024, 11, 18, 13, 38, 26, 301, DateTimeKind.Local).AddTicks(157),
                            Published = true,
                            ShortDescription = "The best places to visit this year",
                            Title = "Top 10 Travel Destinations"
                        });
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TagUrlSlug")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8ec167f-e1ac-4044-9730-d8f5e8ac7c18"),
                            TagName = "C#",
                            TagUrlSlug = "csharp"
                        },
                        new
                        {
                            Id = new Guid("910c43cb-513a-4e88-8022-be1f0c4e51a2"),
                            TagName = "EF Core",
                            TagUrlSlug = "ef-core"
                        },
                        new
                        {
                            Id = new Guid("4b5fe5d1-dff8-4d4c-93d5-84257746b555"),
                            TagName = "ASP.NET",
                            TagUrlSlug = "aspnet"
                        });
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTags", (string)null);

                    b.HasData(
                        new
                        {
                            PostsId = new Guid("cfd5319e-1af5-4da4-83ca-cd6ff65a4575"),
                            TagsId = new Guid("4b5fe5d1-dff8-4d4c-93d5-84257746b555")
                        },
                        new
                        {
                            PostsId = new Guid("cfd5319e-1af5-4da4-83ca-cd6ff65a4575"),
                            TagsId = new Guid("910c43cb-513a-4e88-8022-be1f0c4e51a2")
                        },
                        new
                        {
                            PostsId = new Guid("c2e3392e-3c79-44d5-9c77-d885c794d753"),
                            TagsId = new Guid("b8ec167f-e1ac-4044-9730-d8f5e8ac7c18")
                        },
                        new
                        {
                            PostsId = new Guid("8cea09ae-fb8b-4954-8698-50e48582097b"),
                            TagsId = new Guid("b8ec167f-e1ac-4044-9730-d8f5e8ac7c18")
                        },
                        new
                        {
                            PostsId = new Guid("8cea09ae-fb8b-4954-8698-50e48582097b"),
                            TagsId = new Guid("4b5fe5d1-dff8-4d4c-93d5-84257746b555")
                        });
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Post", b =>
                {
                    b.HasOne("BasedProject.Models.BaseEntities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("BasedProject.Models.BaseEntities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasedProject.Models.BaseEntities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Category", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
