// <auto-generated />
using System;
using BasedProject.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BasedProject.DataAccess.Migrations
{
    [DbContext(typeof(BasedProjectDbContext))]
    [Migration("20241118065038_seed123456789")]
    partial class seed123456789
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CategoryUrlSlug")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d94f809d-4315-47e7-82e2-0699cc3a17dd"),
                            CategoryName = "Technology",
                            CategoryUrlSlug = "technology",
                            Description = "All about tech"
                        },
                        new
                        {
                            Id = new Guid("7352de25-eed2-47da-be78-ffb4c185080a"),
                            CategoryName = "Lifestyle",
                            CategoryUrlSlug = "lifestyle",
                            Description = "Tips for better living"
                        },
                        new
                        {
                            Id = new Guid("6f545e35-c323-4387-ba2e-e8f8312f31ed"),
                            CategoryName = "Travel",
                            CategoryUrlSlug = "travel",
                            Description = "Explore the world"
                        });
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(102400)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostUrlSlug")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("007a1bd0-dd8a-4b82-835a-cd3832db2f09"),
                            CategoryId = new Guid("d94f809d-4315-47e7-82e2-0699cc3a17dd"),
                            PostContent = "ASP.NET is a powerful framework...",
                            PostUrlSlug = "getting-started-aspnet",
                            PostedOn = new DateTime(2024, 11, 18, 13, 50, 38, 204, DateTimeKind.Local).AddTicks(2695),
                            Published = true,
                            ShortDescription = "A guide to ASP.NET for beginners",
                            Title = "Getting Started with ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("df260d11-73bc-4127-a15e-263d4197aa0d"),
                            CategoryId = new Guid("7352de25-eed2-47da-be78-ffb4c185080a"),
                            PostContent = "Living a healthy life involves...",
                            PostUrlSlug = "healthy-living-tips",
                            PostedOn = new DateTime(2024, 11, 18, 13, 50, 38, 204, DateTimeKind.Local).AddTicks(2705),
                            Published = true,
                            ShortDescription = "Tips for a healthy lifestyle",
                            Title = "Healthy Living Tips"
                        },
                        new
                        {
                            Id = new Guid("0905af09-1d4c-4b5f-aa5e-775845d60e7a"),
                            CategoryId = new Guid("6f545e35-c323-4387-ba2e-e8f8312f31ed"),
                            PostContent = "From beaches to mountains, explore...",
                            PostUrlSlug = "top-travel-destinations",
                            PostedOn = new DateTime(2024, 11, 18, 13, 50, 38, 204, DateTimeKind.Local).AddTicks(2706),
                            Published = true,
                            ShortDescription = "The best places to visit this year",
                            Title = "Top 10 Travel Destinations"
                        });
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TagUrlSlug")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ceeae720-b0c6-4ebd-8cd8-be5d6ac9b806"),
                            TagName = "C#",
                            TagUrlSlug = "csharp"
                        },
                        new
                        {
                            Id = new Guid("ae328e27-b4e3-4304-9a50-d5d246489df5"),
                            TagName = "EF Core",
                            TagUrlSlug = "ef-core"
                        },
                        new
                        {
                            Id = new Guid("52736c63-98e7-4b21-8a03-d191546f5dca"),
                            TagName = "ASP.NET",
                            TagUrlSlug = "aspnet"
                        });
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTags", (string)null);

                    b.HasData(
                        new
                        {
                            PostsId = new Guid("007a1bd0-dd8a-4b82-835a-cd3832db2f09"),
                            TagsId = new Guid("52736c63-98e7-4b21-8a03-d191546f5dca")
                        },
                        new
                        {
                            PostsId = new Guid("007a1bd0-dd8a-4b82-835a-cd3832db2f09"),
                            TagsId = new Guid("ae328e27-b4e3-4304-9a50-d5d246489df5")
                        },
                        new
                        {
                            PostsId = new Guid("df260d11-73bc-4127-a15e-263d4197aa0d"),
                            TagsId = new Guid("ceeae720-b0c6-4ebd-8cd8-be5d6ac9b806")
                        },
                        new
                        {
                            PostsId = new Guid("0905af09-1d4c-4b5f-aa5e-775845d60e7a"),
                            TagsId = new Guid("ceeae720-b0c6-4ebd-8cd8-be5d6ac9b806")
                        },
                        new
                        {
                            PostsId = new Guid("0905af09-1d4c-4b5f-aa5e-775845d60e7a"),
                            TagsId = new Guid("52736c63-98e7-4b21-8a03-d191546f5dca")
                        });
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Post", b =>
                {
                    b.HasOne("BasedProject.Models.BaseEntities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("BasedProject.Models.BaseEntities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasedProject.Models.BaseEntities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasedProject.Models.BaseEntities.Category", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
